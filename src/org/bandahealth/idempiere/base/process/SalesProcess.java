package org.bandahealth.idempiere.base.process;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;

import org.bandahealth.idempiere.base.model.MOrder_BH;
import org.bandahealth.idempiere.base.model.MPayment_BH;
import org.compiere.model.MInvoice;
import org.compiere.model.MMessage;
import org.compiere.model.Query;
import org.compiere.process.DocAction;
import org.compiere.process.ProcessInfoParameter;
import org.compiere.process.SvrProcess;
import org.compiere.util.AdempiereUserError;

public class SalesProcess extends SvrProcess {

	private int orderId;

	@Override
	protected void prepare() {
		ProcessInfoParameter[] parameters = getParameter();

		for (ProcessInfoParameter parameter : parameters) {

			String parameterName = parameter.getParameterName();

			if (parameterName.equalsIgnoreCase("c_order_id")) {
				orderId = parameter.getParameterAsInt();
			} else {
				log.log(Level.SEVERE, "Unknown Parameter: " + parameterName);
			}
		}
	}

	@Override
	protected String doIt() throws Exception {
		// First, complete the sales order, which generates a shipment and an invoice
		String where = MOrder_BH.COLUMNNAME_C_Order_ID + "=?";
		MOrder_BH order = new Query(getCtx(), MOrder_BH.Table_Name, where, get_TrxName()).setParameters(orderId)
		        .first();
		
		if (order.isSOTrx()) {
			return processSalesOrder(order);
		} else {
			order.setBH_Isexpense(true);
			order.processIt(DocAction.ACTION_Complete);
		}

		return null;
	}

	private String processSalesOrder(MOrder_BH salesOrder) throws Exception {
		/*Packed out from BH_SysConfig*/
		String noLineItemsEnteredErrorMsgUUID = "03cb65e5-104c-4dd6-bec0-4bfe244ae804";
		if (!salesOrder.getDocStatus().equals(MOrder_BH.DOCSTATUS_Drafted)) {
			return null;
		}
		Date date = new Date();
		if (salesOrder.getDateAcct() != null && salesOrder.getDateAcct().before(date)) {
			salesOrder.setDateAcct(new Timestamp(date.getTime()));
			log.info("Setting accounting date to: " + salesOrder.getDateAcct());
		}
		if ((salesOrder.getTotalLines().intValue() == 0)) {
			MMessage message = new Query(getCtx(), MMessage.Table_Name, MMessage.COLUMNNAME_AD_Message_UU + "=?",
					get_TrxName()).setParameters(noLineItemsEnteredErrorMsgUUID).first();
			throw new AdempiereUserError(message.getMsgText());
		}
		boolean salesOrderIsComplete = salesOrder.processIt(DocAction.ACTION_Complete);
		if (!salesOrderIsComplete) {
			log.severe("Error trying to complete order " + salesOrder.getC_Order_ID());

			throw new Exception("There was an error processing the order.");
		}

		// On the invoice, the payment will have been added automatically, so reverse it
		MInvoice invoice = salesOrder.getInvoices()[0];
		String where = MPayment_BH.COLUMNNAME_C_Invoice_ID + "=?";
		MPayment_BH autoGeneratedPayment = new Query(getCtx(), MPayment_BH.Table_Name, where, get_TrxName())
		        .setParameters(invoice.getC_Invoice_ID()).first();

		boolean paymentReversalStatus = autoGeneratedPayment.processIt(DocAction.ACTION_Reverse_Correct);
		if (!paymentReversalStatus) {
			log.severe("Error removing the default assigned payment for order " + salesOrder.getC_Order_ID()
			        + " and invoice " + invoice.getC_Invoice_ID());
			throw new Exception("There was an error updating the payments.");
		}

		// Now go through and add the payment with the amount specified on the order
		where = MPayment_BH.COLUMNNAME_BH_C_Order_ID + "=?";
		List<MPayment_BH> orderPayments = new Query(getCtx(), MPayment_BH.Table_Name, where, get_TrxName())
		        .setParameters(salesOrder.getC_Order_ID()).list();
		BigDecimal totalPayments = new BigDecimal(0);
		for (MPayment_BH orderPayment : orderPayments) {
			orderPayment.setC_Invoice_ID(invoice.getC_Invoice_ID());
			orderPayment.saveEx(get_TrxName());

			boolean paymentIsComplete = orderPayment.processIt(DocAction.ACTION_Complete);
			if (!paymentIsComplete) {
				log.severe("Error auto-processing payment " + orderPayment.getC_Payment_ID()
				        + "and associating it to invoice " + invoice.getC_Invoice_ID());
				throw new Exception("There was an error processing the payments.");
			}

			totalPayments = totalPayments.add(orderPayment.getPayAmt());

			orderPayment.saveEx(get_TrxName());
		}

		// store 'balance' as a negative payment
		BigDecimal change = totalPayments.subtract(salesOrder.getGrandTotal());
		if (change.compareTo(BigDecimal.ZERO) > 0) {
			change = change.multiply(new BigDecimal(-1));

			MPayment_BH orderPayment = new MPayment_BH(getCtx(), 0, get_TrxName());
			orderPayment.copyValues(orderPayments.get(0), orderPayment);
			orderPayment.setAD_Org_ID(salesOrder.getAD_Org_ID());
			orderPayment.setC_Invoice_ID(0);
			orderPayment.setC_Charge_ID(0);
			orderPayment.setDocAction(MPayment_BH.DOCACTION_Complete);
			orderPayment.setDocStatus(MPayment_BH.DOCSTATUS_Drafted);
			orderPayment.setDescription("Change");

			orderPayment.setPayAmt(change);

			orderPayment.saveEx(get_TrxName());

			boolean paymentIsComplete = orderPayment.processIt(DocAction.ACTION_Complete);
			if (!paymentIsComplete) {
				log.severe("Error auto-processing 'balance' payment " + orderPayment.getC_Payment_ID()
				        + "and associating it to invoice " + invoice.getC_Invoice_ID());
				throw new Exception("There was an error processing 'balance' payment.");
			}

			orderPayment.saveEx(get_TrxName());
		}
		return null;
	}
}
