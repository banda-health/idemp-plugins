package org.bandahealth.idempiere.base.process;

import java.util.List;
import java.util.logging.Level;

import org.bandahealth.idempiere.base.model.MOrder_BH;
import org.bandahealth.idempiere.base.model.MPayment_BH;
import org.compiere.model.MInvoice;
import org.compiere.model.Query;
import org.compiere.process.DocAction;
import org.compiere.process.ProcessInfoParameter;
import org.compiere.process.SvrProcess;

public class SalesProcess extends SvrProcess {

	private int orderId;

	@Override
	protected void prepare() {
		ProcessInfoParameter[] parameters = getParameter();

		for (ProcessInfoParameter parameter : parameters) {

			String parameterName = parameter.getParameterName();

			if (parameterName.equalsIgnoreCase("c_order_id")) {
				orderId = parameter.getParameterAsInt();
			} else {
				log.log(Level.SEVERE, "Unknown Parameter: " + parameterName);
			}
		}
	}

	@Override
	protected String doIt() throws Exception {

		// First, complete the sales order, which generates a shipment and an invoice
		String where = MOrder_BH.COLUMNNAME_C_Order_ID + "=?";
		MOrder_BH salesOrder = new Query(getCtx(), MOrder_BH.Table_Name, where, get_TrxName())
				.setParameters(orderId)
				.first();

		if (!salesOrder.getDocStatus().equals(MOrder_BH.DOCSTATUS_Drafted)) {
			return null;
		}

		boolean salesOrderIsComplete = salesOrder.processIt(DocAction.ACTION_Complete);
		if (!salesOrderIsComplete) {
			log.severe("Error trying to complete order " + salesOrder.getC_Order_ID());
			throw new Exception("There was an error processing the order.");
		}

		// On the invoice, the payment will have been added automatically, so reverse it
		MInvoice invoice = salesOrder.getInvoices()[0];
		where = MPayment_BH.COLUMNNAME_C_Invoice_ID + "=?";
		MPayment_BH autoGeneratedPayment = new Query(getCtx(), MPayment_BH.Table_Name, where, get_TrxName())
				.setParameters(invoice.getC_Invoice_ID())
				.first();

		boolean paymentReversalStatus = autoGeneratedPayment.processIt(DocAction.ACTION_Reverse_Correct);
		if (!paymentReversalStatus) {
			log.severe("Error removing the default assigned payment for order " + salesOrder.getC_Order_ID()
					+ " and invoice " + invoice.getC_Invoice_ID());
			throw new Exception("There was an error updating the payments.");
		}

		// Now go through and add the payment with the amount specified on the order
		where = MPayment_BH.COLUMNNAME_BH_C_Order_ID + "=?";
		List<MPayment_BH> orderPayments = new Query(getCtx(), MPayment_BH.Table_Name, where, get_TrxName())
				.setParameters(salesOrder.getC_Order_ID())
				.list();
		for (MPayment_BH orderPayment : orderPayments) {
			orderPayment.setC_Invoice_ID(invoice.getC_Invoice_ID());
			orderPayment.saveEx(get_TrxName());

			boolean paymentIsComplete = orderPayment.processIt(DocAction.ACTION_Complete);
			if (!paymentIsComplete) {
				log.severe("Error auto-processing payment " + orderPayment.getC_Payment_ID()
						+ "and associating it to invoice " + invoice.getC_Invoice_ID());
				throw new Exception("There was an error processing the payments.");
			}
			orderPayment.saveEx(get_TrxName());
		}

		return null;
	}
}
