/* tslint:disable */
/* eslint-disable */
// Generated using typescript-generator version 2.36.1070 on 2022-07-11 07:20:59.

export interface AccessLevel {
    windowUuid: string;
    canWrite: boolean;
    canDeactivate: boolean;
}

export interface Account extends BaseEntity {
}

export interface AttributeSet extends BaseEntity {
    serialNumberControl: SerialNumberControl;
    guaranteeDays: number;
    mandatoryType: ReferenceList;
    serialNumberStartCharacterOverwrite: string;
    serialNumberEndCharacterOverwrite: string;
    lotStartCharacterOverwrite: string;
    lotEndCharacterOverwrite: string;
    type: string;
    locked: boolean;
    serialNumber: boolean;
    lotMandatory: boolean;
    lot: boolean;
    guaranteeDate: boolean;
    autoGeneratedLot: boolean;
    instanceAttribute: boolean;
    guaranteeDateMandatory: boolean;
    serialNumberMandatory: boolean;
    isSerialNumber: boolean;
    isLot: boolean;
    isGuaranteeDate: boolean;
    isInstanceAttribute: boolean;
    isGuaranteeDateMandatory: boolean;
    isLotMandatory: boolean;
    isSerialNumberMandatory: boolean;
    useGuaranteeDateForMaterialPolicy: boolean;
    isAutoGeneratedLot: boolean;
    isLocked: boolean;
}

export interface AttributeSetInstance extends BaseMetadata {
    guaranteeDate: Date;
    updateReason: ReferenceList;
    serialNumber: string;
    lot: string;
    attributeSet: AttributeSet;
    purchasePrice: number;
    purchaseDate: Date;
}

export interface AuthResponse {
    token: string;
    status: Status;
    userId: number;
    username: string;
    clients: Client[];
    hasAcceptedTermsOfUse: boolean;
    roleUuid: string;
    needsToResetPassword: boolean;
    securityQuestions: string[];
    isAdministrator: boolean;
    windowAccessLevel: { [index: string]: AccessLevel };
    clientUuid: string;
    orgId: number;
    warehouseUuid: string;
    userUuid: string;
    includedRoleUUIds: string[];
    includedRoleUuids: string[];
}

export interface Authentication {
    username: string;
    password: string;
    newPassword: string;
    securityQuestion: string;
    answer: string;
    clientUuid: string;
    roleUuid: string;
    organizationId: number;
    warehouseUuid: string;
    language: string;
}

export interface BHProcessInfo extends BaseMetadata {
    title: string;
    processId: number;
    tableId: number;
    recordId: number;
    summary: string;
    error: boolean;
    batch: boolean;
    timeout: boolean;
    pinstanceId: number;
    parameters: BHProcessInfoParameter[];
}

export interface BHProcessInfoParameter extends BaseMetadata {
    parameterName: string;
    parameter: any;
    parameterTo: any;
    info: string;
    infoTo: string;
}

export interface BaseEntity extends BaseMetadata {
    description: string;
    name: string;
    value: string;
}

export interface BaseListResponse<T> {
    results: T[];
    pagingInfo: Paging;
}

export interface BaseMetadata extends Serializable {
    clientId: number;
    orgId: number;
    uuid: string;
    isActive: boolean;
    created: string;
    createdTimestamp: Date;
}

export interface BaseObject extends Serializable {
    id: number;
    name: string;
}

export interface BusinessPartner extends BaseEntity {
    totalOpenBalance: number;
}

export interface BusinessPartnerCharge extends BaseEntity {
    chargeUuid: string;
    businessPartnerUuid: string;
    chargeInformationList: BusinessPartnerChargeInformation[];
}

export interface BusinessPartnerChargeInformation extends BaseEntity {
    chargeInformationUuid: string;
}

export interface Charge extends BaseEntity {
    subType: ReferenceList;
    needAdditionalVisitInformation: boolean;
    chargeInformationList: ChargeInformation[];
    account: Account;
    chargeType: ChargeType;
    locked: boolean;
    isLocked: boolean;
}

export interface ChargeInformation extends BaseEntity {
    shouldFillFromPatient: boolean;
    lineNumber: number;
    dataType: ReferenceList;
    values: ChargeInformationValue[];
}

export interface ChargeInformationSuggestion extends BaseEntity {
    shouldFillFromPatient: boolean;
    lineNumber: number;
    dataType: ReferenceList;
    values: ChargeInformationValueSuggestion[];
    subType: ReferenceList;
}

export interface ChargeInformationValue extends BaseEntity {
    lineNumber: number;
}

export interface ChargeInformationValueSuggestion extends BaseEntity {
    lineNumber: number;
}

export interface ChargeType extends BaseEntity {
}

export interface Client extends BaseEntity {
    orgs: Org[];
}

export interface CodedDiagnosis extends BaseMetadata {
    cielName: string;
    cielId: number;
    conceptClass: string;
    icd10: string;
    synomedCT: number;
    synomedNP: number;
    synonyms: string;
    description: string;
    moh705bGreaterThan5: string;
    searchTerms: string;
    moh705aLessthan5: string;
    moh705aLessThan5: string;
}

export interface EntityMetadata {
    patientTypes: PatientType[];
    nhifTypes: NHIFType[];
    nhifRelationships: NHIFRelationship[];
    referrals: Referral[];
    productCategoryTypes: BaseEntity[];
    processStageList: ProcessStage[];
    documentStatuses: ReferenceList[];
}

export interface Expense extends Invoice {
    supplier: Vendor;
}

export interface ExpenseCategory extends BaseEntity {
    isLocked: boolean;
    accountUuid: string;
}

export interface Inventory extends BaseEntity {
    warehouse: Warehouse;
    updateReason: ReferenceList;
    inventoryLines: InventoryLine[];
    documentStatus: string;
}

export interface InventoryLine extends BaseEntity {
    product: Product;
    attributeSetInstance: AttributeSetInstance;
    locator: Locator;
    line: number;
    quantityCount: number;
}

export interface Invoice extends BaseMetadata {
    businessPartner: BusinessPartner;
    dateInvoiced: string;
    dateInvoicedCreated: Date;
    grandTotal: number;
    description: string;
    invoiceLines: InvoiceLine[];
    paymentRule: string;
    docStatus: string;
    voidedReason: VoidedReason;
    isExpense: boolean;
}

export interface InvoiceLine extends BaseMetadata {
    expenseCategory: ExpenseCategory;
    product: Product;
    description: string;
    invoiceId: number;
    price: number;
    quantity: number;
    lineNetAmount: number;
    attributeSetInstanceId: number;
    charge: Charge;
}

export interface Language {
    uuid: string;
    isBaseLanguage: boolean;
    printName: string;
    isSystemLanguage: boolean;
    isActive: boolean;
    languageISO: string;
    locale: string;
}

export interface Locator extends BaseMetadata {
    value: string;
    warehouse: Warehouse;
    default: boolean;
    isDefault: boolean;
}

export interface Menu extends BaseEntity {
    iconClassName: string;
    window: Window;
    process: Process;
    subMenus: Menu[];
    sequenceNumber: number;
}

export interface Movement extends BaseMetadata {
    fromWarehouse: Warehouse;
    toWarehouse: Warehouse;
    docStatus: string;
    movementDate: string;
    description: string;
    user: User;
    movementLines: MovementLine[];
}

export interface MovementLine extends BaseEntity {
    movementQuantity: number;
    product: Product;
    movementUuid: string;
    attributeSetInstance: AttributeSetInstance;
    locator: Locator;
    locatorTo: Locator;
}

export interface NHIF extends Serializable {
    type: NHIFType;
    relationship: NHIFRelationship;
    claimNumber: string;
    memberId: string;
    number: string;
    memberName: string;
}

export interface NHIFRelationship extends BaseEntity {
}

export interface NHIFType extends BaseEntity {
}

export interface Order extends BaseMetadata {
    businessPartner: BusinessPartner;
    dateOrdered: string;
    grandTotal: number;
    description: string;
    orderLines: OrderLine[];
    payments: Payment[];
    docStatus: string;
    voidedReason: VoidedReason;
    warehouse: Warehouse;
}

export interface OrderLine extends BaseMetadata {
    expenseCategory: ExpenseCategory;
    orderId: number;
    product: Product;
    price: number;
    quantity: number;
    lineNetAmount: number;
    instructions: string;
    charge: Charge;
    chargeInformationList: OrderLineChargeInformation[];
    description: string;
    attributeSetInstance: AttributeSetInstance;
}

export interface OrderLineChargeInformation extends BaseEntity {
    chargeInformationUuid: string;
}

export interface Org extends BaseObject {
    roles: Role[];
    warehouses: Warehouse[];
}

export interface Paging {
    page: number;
    pageSize: number;
    totalRecordCount: number;
    hasMoreResults: boolean;
    totalPages: number;
}

export interface ALL {
}

export interface DEFAULT {
}

export interface Patient extends BusinessPartner {
    patientNumber: string;
    dateOfBirth: string;
    phone: string;
    address: string;
    gender: string;
    email: string;
    nhifRelationship: string;
    nhifMemberName: string;
    nhifNumber: string;
    nhifType: string;
    nationalId: string;
    occupation: string;
    nextOfKinName: string;
    nextOfKinContact: string;
    localPatientNumber: string;
    totalVisits: number;
    lastVisitDate: string;
    approximateDateOfBirth: boolean;
    isApproximateDateOfBirth: boolean;
}

export interface PatientSummary extends BaseMetadata {
    totalVisits: number;
    inpatientVisits: number;
    outpatientVisits: number;
    patientsWithOutstandingBalance: number;
}

export interface PatientType extends BaseEntity {
}

export interface Payment extends BaseMetadata {
    patient: Patient;
    chargeId: number;
    orderId: number;
    payAmount: number;
    paymentType: PaymentType;
    description: string;
    nhif: NHIF;
    docStatus: string;
    transactionDate: string;
    tenderAmount: number;
}

export interface PaymentType extends BaseEntity {
}

export interface Process extends BaseEntity {
    adFormId: number;
    adReportViewId: number;
    adWorkflowId: number;
    allowMultipleExecution: string;
    classname: string;
    copyFromProcess: string;
    entityType: string;
    executionType: string;
    parameters: ProcessParameter[];
    needsManualInput: boolean;
    report: boolean;
    directPrint: boolean;
}

export interface ProcessInfoParameter extends BaseMetadata {
    processParameterUuid: string;
    parameterName: string;
    parameter: any;
    parameterTo: any;
    info: string;
    infoTo: string;
}

export interface ProcessParameter extends BaseEntity {
    adElementId: number;
    adReferenceId: number;
    adReferenceValueId: number;
    adValueRuleId: number;
    defaultValue: string;
    defaultValue2: string;
    displayLogic: string;
    entityType: string;
    fieldLength: number;
    mandatoryLogic: string;
    reference: Reference;
    referenceValues: ReferenceList[];
    sequenceNumber: number;
    columnName: string;
    range: boolean;
    encrypted: boolean;
    mandatory: boolean;
}

export interface ProcessStage extends BaseEntity {
}

export interface Product extends BaseEntity {
    isStocked: boolean;
    reorderLevel: number;
    reorderQuantity: number;
    buyPrice: number;
    sellPrice: number;
    type: string;
    productCategoryUuid: string;
    totalQuantity: number;
    defaultStockLevel: number;
    storageOnHandList: StorageOnHand[];
    attributeSet: AttributeSet;
}

export interface ProductCategory extends BaseEntity {
    productCategoryType: string;
}

export interface ProductCostCalculation {
    productId: number;
    attributeSetInstanceId: number;
    purchasePrice: number;
    purchaseDate: Date;
}

export interface ReceiveProduct extends Order {
    vendor: Vendor;
}

export interface Reference extends BaseEntity {
}

export interface ReferenceList extends BaseEntity {
}

export interface Referral extends BaseEntity {
}

export interface Role extends BaseEntity {
}

export interface SerialNumberControl extends BaseEntity {
    startNumber: number;
    incrementNumber: number;
    currentNext: number;
    prefix: string;
    suffix: string;
    locked: boolean;
    isLocked: boolean;
}

export interface Service extends BaseEntity {
    sellingPrice: number;
    productCategoryUuid: string;
}

export interface StorageOnHand extends BaseMetadata {
    quantityOnHand: number;
    attributeSetInstance: AttributeSetInstance;
    locator: Locator;
    dateMaterialPolicy: Date;
    product: Product;
}

export interface User extends BaseMetadata {
    name: string;
    dateLastLogin: Date;
    roles: Role[];
    resetPassword: string;
}

export interface Vendor extends BusinessPartner {
    phoneNumber: string;
    emailAddress: string;
}

export interface Visit extends Order {
    newVisit: boolean;
    clinicalNotes: string;
    labNotes: string;
    patientType: PatientType;
    referral: Referral;
    status: OrderStatus;
    patient: Patient;
    chiefComplaint: string;
    temperature: string;
    pulse: string;
    respiratoryRate: string;
    height: string;
    weight: string;
    clinician: User;
    processStage: ProcessStage;
    referredFromTo: string;
    visitDate: Date;
    primaryCodedDiagnosis: CodedDiagnosis;
    secondaryCodedDiagnosis: CodedDiagnosis;
    primaryUnCodedDiagnosis: string;
    secondaryUnCodedDiagnosis: string;
    systolicBloodPressure: number;
    diastolicBloodPressure: number;
    oxygenSaturation: number;
    diagnosis: string;
}

export interface VoidedReason extends BaseEntity {
    lineNo: number;
}

export interface Warehouse extends BaseEntity {
    defaultWarehouse: boolean;
    locators: Locator[];
}

export interface Window extends BaseEntity {
}

export interface Serializable {
}

export type OrderStatus = "WAITING" | "DISPENSING" | "PENDING" | "PENDING_COMPLETION" | "COMPLETED";

export type ReportType = "PDF" | "HTML" | "XLS" | "CSV" | "XLSX";

export type Status = "OK" | "CREATED" | "ACCEPTED" | "NO_CONTENT" | "RESET_CONTENT" | "PARTIAL_CONTENT" | "MOVED_PERMANENTLY" | "FOUND" | "SEE_OTHER" | "NOT_MODIFIED" | "USE_PROXY" | "TEMPORARY_REDIRECT" | "BAD_REQUEST" | "UNAUTHORIZED" | "PAYMENT_REQUIRED" | "FORBIDDEN" | "NOT_FOUND" | "METHOD_NOT_ALLOWED" | "NOT_ACCEPTABLE" | "PROXY_AUTHENTICATION_REQUIRED" | "REQUEST_TIMEOUT" | "CONFLICT" | "GONE" | "LENGTH_REQUIRED" | "PRECONDITION_FAILED" | "REQUEST_ENTITY_TOO_LARGE" | "REQUEST_URI_TOO_LONG" | "UNSUPPORTED_MEDIA_TYPE" | "REQUESTED_RANGE_NOT_SATISFIABLE" | "EXPECTATION_FAILED" | "PRECONDITION_REQUIRED" | "TOO_MANY_REQUESTS" | "REQUEST_HEADER_FIELDS_TOO_LARGE" | "INTERNAL_SERVER_ERROR" | "NOT_IMPLEMENTED" | "BAD_GATEWAY" | "SERVICE_UNAVAILABLE" | "GATEWAY_TIMEOUT" | "HTTP_VERSION_NOT_SUPPORTED" | "NETWORK_AUTHENTICATION_REQUIRED";
